{"version":3,"sources":["webpack:///./src/components/workImages.tsx","webpack:///./src/components/workView.tsx"],"names":["Grid","styled","div","FullItem","HalfItem","props","start","theme","mobileSize","WorkImages","images","swtch","imgs","console","log","map","image","i","fluid","childImageSharp","length","Container","Info","query","WorkView","data","worksJson","title","description","tech_used","type","url","href"],"mappings":"8MAIMA,EAAOC,IAAOC,IAAV,uEAAGD,CAAH,qEAKJE,EAAWF,IAAOC,IAAV,2EAAGD,CAAH,6BAGRG,EAAWH,IAAOC,IAAV,2EAAGD,CAAH,6JACG,SAAAI,GAAK,OAAKA,EAAMC,MAAQ,aAAe,gBAMjB,SAAAD,GAAK,OAAIA,EAAME,MAAMC,cA8C7CC,EAtCI,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,OAGhBC,GAAQ,EAENC,EAAOF,GAAkB,GAI/B,OAFAG,QAAQC,IAAIF,GAGV,kBAACZ,EAAD,KACGY,EAAKG,KAAI,SAACC,EAAYC,GACrB,OAAIA,EAAI,GAAM,GACZJ,QAAQC,IAAIG,GAEV,kBAACd,EAAD,KACE,kBAAC,IAAD,CAAKe,MAAOF,EAAMG,gBAAgBD,UAG7BR,EAAOU,OAAS,IAAMH,GAAKP,EAAOU,OAAS,GAAM,EAExD,kBAACjB,EAAD,KACE,kBAAC,IAAD,CAAKe,MAAOF,EAAMG,gBAAgBD,UAItCP,GAASA,EAEP,kBAACP,EAAD,CAAUE,MAAOK,GACf,kBAAC,IAAD,CAAKO,MAAOF,EAAMG,gBAAgBD,eC9C1CG,EAAYpB,IAAOC,IAAV,0EAAGD,CAAH,MACTqB,EAAOrB,IAAOC,IAAV,qEAAGD,CAAH,6JAuDGsB,GAFEC,UAtCE,SAACnB,GAAyB,MASrCA,EAAMoB,KAAKC,UAPbC,EAFuC,EAEvCA,MACAC,EAHuC,EAGvCA,YACAC,EAJuC,EAIvCA,UAEAC,GANuC,EAKvCd,MALuC,EAMvCc,MACAC,EAPuC,EAOvCA,IACArB,EARuC,EAQvCA,OAGF,OADAG,QAAQC,IAAIT,GAEV,kBAAC,IAAD,KACE,kBAACgB,EAAD,KACE,kBAACC,EAAD,KACGS,EACC,oCACE,uBAAGC,KAAMD,GACP,4BAAKJ,GACL,2BAAIG,GACJ,iDAAuBD,KAI3B,6BACE,4BAAKF,GACL,2BAAIG,GACJ,iDAAuBD,IAG3B,2BAAID,IAEN,kBAAC,EAAD,CAAYlB,OAAQA,OAQP","file":"component---src-components-work-view-tsx-cf44cf02ed12bcf34297.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport styled from \"styled-components\"\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 20px;\n`\nconst FullItem = styled.div`\n  grid-column: 1 / span 4;\n`\nconst HalfItem = styled.div`\n  grid-column: ${props => (props.start ? \"1 / span 2\" : \"3 / span 2\")};\n\n  .gatsby-image-wrapper {\n    height: 700px;\n  }\n\n  @media only screen and (max-width: ${props => props.theme.mobileSize}) {\n    grid-column: 1 / span 4;\n    .gatsby-image-wrapper {\n      height: 500px;\n    }\n  }\n`\n\nconst WorkImages = ({ images }: any) => {\n  // hack-y fuckin way of alternating grid items, i'll fix this later\n  // TODO: fix this later\n  let swtch = false\n\n  const imgs = images ? images : []\n\n  console.log(imgs)\n\n  return (\n    <Grid>\n      {imgs.map((image: any, i: number) => {\n        if (i % 3 === 0) {\n          console.log(i)\n          return (\n            <FullItem>\n              <Img fluid={image.childImageSharp.fluid} />\n            </FullItem>\n          )\n        } else if (images.length - 1 === i && images.length % 2 !== 0) {\n          return (\n            <FullItem>\n              <Img fluid={image.childImageSharp.fluid} />\n            </FullItem>\n          )\n        } else {\n          swtch = !swtch\n          return (\n            <HalfItem start={swtch}>\n              <Img fluid={image.childImageSharp.fluid} />\n            </HalfItem>\n          )\n        }\n      })}\n    </Grid>\n  )\n}\n\nexport default WorkImages\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport Layout from \"./layout\"\nimport WorkImages from \"./workImages\"\n\ntype WorkViewProps = {\n  data: any\n}\n\nconst Container = styled.div``\nconst Info = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-bottom: 48px;\n  p {\n    margin: 10px 0;\n    max-width: 500px;\n  }\n  a {\n    padding-right: 50px;\n  }\n`\n\nconst WorkView = (props: WorkViewProps) => {\n  const {\n    title,\n    description,\n    tech_used,\n    image,\n    type,\n    url,\n    images,\n  } = props.data.worksJson\n  console.log(props)\n  return (\n    <Layout>\n      <Container>\n        <Info>\n          {url ? (\n            <>\n              <a href={url}>\n                <h1>{title}</h1>\n                <p>{type}</p>\n                <p>Technologies Used: {tech_used}</p>\n              </a>\n            </>\n          ) : (\n            <div>\n              <h1>{title}</h1>\n              <p>{type}</p>\n              <p>Technologies Used: {tech_used}</p>\n            </div>\n          )}\n          <p>{description}</p>\n        </Info>\n        <WorkImages images={images} />\n      </Container>\n    </Layout>\n  )\n}\n\nexport default WorkView\n\nexport const query = graphql`\n  query workQ($id: String!) {\n    worksJson(id: { eq: $id }) {\n      title\n      type\n      tech_used\n      description\n      url\n      image\n      images {\n        childImageSharp {\n          fluid(maxWidth: 1440) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}